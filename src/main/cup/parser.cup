package org.automatas.language;

import java.util.HashMap;
import java_cup.runtime.Symbol;
import org.automatas.engine.Ast;
import org.automatas.engine.AstKind;
import org.automatas.engine.AstList;
import org.automatas.engine.ScalarType;
import org.automatas.engine.UserFunction;

parser code {:
    private HashMap<String, Ast> declaredStructs = new HashMap<>();
    private HashMap<String, UserFunction> declaredFunctions = new HashMap<>();

    public HashMap<String, Ast> getDeclaredStructs() {
        return declaredStructs;
    }

    public HashMap<String, UserFunction> getDeclaredFunctions() {
        return declaredFunctions;
    }

    private void registerStructDefinition(Ast identifier, Ast members) {
        String name = identifier.value.toString();
        if (declaredStructs.containsKey(name)) {
            throw new RuntimeException(String.format("Parse error: struct '%s' is already defined.", name));
        }

        declaredStructs.put(name, members);
    }

    private void registerFunction(Ast identifier, Ast argList, Ast body) {
        String name = identifier.value.toString();
        if (declaredFunctions.containsKey(name)) {
            throw new RuntimeException(String.format("Parse error: function '%s' is already defined.", name));
        }

        String[] params = new String[argList.child.length];
        for (int i = 0; i < argList.child.length; i++) {
            params[i] = argList.child[i].value.toString();
        }

        var func = new UserFunction(name, params, body);
        declaredFunctions.put(name, func);
    }
:}

/* Literals */
terminal boolean BOOL;
terminal double  FLOAT;
terminal long    INTEGER;
terminal String  STRING;
terminal String  LABEL;

/* Logic operators */
terminal DECLARATION;
terminal ASSIGN;
terminal EQUALS;
terminal NOT_EQUALS;
terminal SMALLER;
terminal SMALLER_OR_EQUAL;
terminal GREATER;
terminal GREATER_OR_EQUAL;
terminal AND;
terminal OR;

/* Arithmetic operators */
terminal PLUS;
terminal MINUS;
terminal MULTIPLY;
terminal POW;
terminal DIVIDE;
terminal MODULO;
terminal INCREMENT;
terminal DECREMENT;

/* Keywords */
terminal UNSET;
terminal LEN;
terminal TYPEOF;
terminal AS;
terminal IS;
terminal IN;
terminal FOR;
terminal FOREACH;
terminal DO;
terminal WHILE;
terminal IF;
terminal ELSE;
terminal NOELSE;
terminal STRUCT;
terminal FN;
terminal RETURN;
terminal NEW;
terminal PUB;

/* Symbols */
terminal LPAREN;
terminal RPAREN;
terminal LBRACKET;
terminal RBRACKET;
terminal LBRACE;
terminal RBRACE;
terminal EXCLAMATION;
terminal COMMA;
terminal DOT;
terminal SEMICOLON;

/* Statements */
non terminal AstList statement_list;
non terminal Ast top_statement;
non terminal Ast statement;
non terminal Ast if_statement;
non terminal Ast if_stmt_without_else;

/* Structs */
non terminal struct_declaration;
non terminal Ast struct_member;
non terminal AstList struct_member_list;

/* Expressions */
non terminal AstList expr_list;
non terminal AstList parameter_list;
non terminal AstList non_empty_parameter_list;
non terminal Ast expr;
non terminal Ast array_expr;
non terminal Ast optional_expr;
non terminal Ast scalar;
non terminal Ast identifier;
non terminal Ast variable;
non terminal Ast array_access;
non terminal Ast struct_access;
non terminal Ast function_call;

precedence nonassoc DECLARATION;
precedence nonassoc ASSIGN;
precedence nonassoc EXCLAMATION;
precedence nonassoc EQUALS;
precedence nonassoc NOT_EQUALS;
precedence nonassoc SMALLER;
precedence nonassoc SMALLER_OR_EQUAL;
precedence nonassoc GREATER;
precedence nonassoc GREATER_OR_EQUAL;
precedence nonassoc INCREMENT;
precedence nonassoc DECREMENT;
precedence nonassoc ELSE;
precedence nonassoc LBRACKET;
precedence nonassoc RBRACKET;

precedence left PLUS;
precedence left MINUS;
precedence left MULTIPLY;
precedence left POW;
precedence left DIVIDE;
precedence left MODULO;
precedence left AND;
precedence left OR;
precedence left AS;
precedence left IS;
precedence left LPAREN;
precedence left RPAREN;

start with top_statement;

top_statement ::=
    struct_declaration top_statement:ts     {: RESULT = ts; :}
  | statement_list:sl                       {: RESULT = sl.makeList(); :}
;

statement_list ::=
    statement_list:sl statement:s           {: RESULT = sl.add(s); :}
  | /* %empty */                            {: RESULT = AstList.beginList(); :}
;

struct_declaration ::=
    STRUCT identifier:i LBRACE struct_member_list:sml RBRACE
                                            {: registerStructDefinition(i, sml.makeList()); :}
  | FN identifier:i LPAREN parameter_list:pl RPAREN LBRACE statement_list:sl RBRACE
                                            {: registerFunction(i, pl.makeArray(), sl.makeList()); :}
;

struct_member ::=
    PUB identifier:i SEMICOLON              {: RESULT = i; :}
;

struct_member_list ::=
    struct_member:sm                        {: RESULT = AstList.beginList(sm); :}
  | struct_member_list:smb struct_member:sm {: RESULT = smb.add(sm); :}
;

statement ::=
    LBRACE statement_list:sl RBRACE         {: RESULT = sl.makeList(); :}
  | if_statement:i                          {: RESULT = i; :}
  | DO statement:s WHILE expr:e SEMICOLON   {: RESULT = Ast.make(AstKind.AST_DO_WHILE, s, e); :}
  | WHILE expr:e statement:s                {: RESULT = Ast.make(AstKind.AST_WHILE, e, s); :}
  | FOR expr:a SEMICOLON expr:b SEMICOLON expr:c statement:s
                                            {: RESULT = Ast.make(AstKind.AST_FOR, a, b, c, s); :}
  | FOREACH identifier:i IN expr:e statement:s
                                            {: RESULT = Ast.make(AstKind.AST_FOREACH, i, e, s); :}
  | expr:e SEMICOLON                        {: RESULT = e; :}
  | UNSET variable:v SEMICOLON              {: RESULT = Ast.make(AstKind.AST_UNSET, v); :}
  | RETURN optional_expr:oe SEMICOLON       {: RESULT = Ast.make(AstKind.AST_RETURN, oe); :}
;

if_stmt_without_else ::=
    IF expr:e statement:s                   {: RESULT = Ast.make(AstKind.AST_IF, e, s); :}
;

if_statement ::=
    if_stmt_without_else:iswe               {: RESULT = iswe; :} %prec NOELSE
  | if_stmt_without_else:iswe ELSE statement:s
                                            {: RESULT = Ast.make(AstKind.AST_IF_ELSE, iswe, s); :}
;

expr ::=
    variable:v                              {: RESULT = v; :}
  | variable:v DECLARATION expr:e           {: RESULT = Ast.make(AstKind.AST_DECLARATION, v, e); :}
  | variable:v ASSIGN expr:e                {: RESULT = Ast.make(AstKind.AST_ASSIGN, v, e); :}
  | variable:v INCREMENT                    {: RESULT = Ast.make(AstKind.AST_POST_INC, v); :}
  | INCREMENT variable:v                    {: RESULT = Ast.make(AstKind.AST_PRE_INC, v); :}
  | variable:v DECREMENT                    {: RESULT = Ast.make(AstKind.AST_POST_DEC, v); :}
  | DECREMENT variable:v                    {: RESULT = Ast.make(AstKind.AST_PRE_DEC, v); :}
  | expr:a AND expr:b                       {: RESULT = Ast.make(AstKind.AST_AND, a, b); :}
  | expr:a OR expr:b                        {: RESULT = Ast.make(AstKind.AST_OR, a, b); :}
  | expr:a PLUS expr:b                      {: RESULT = Ast.make(AstKind.AST_ADD, a, b); :}
  | expr:a MINUS expr:b                     {: RESULT = Ast.make(AstKind.AST_SUBTRACT, a, b); :}
  | expr:a MULTIPLY expr:b                  {: RESULT = Ast.make(AstKind.AST_MULTIPLY, a, b); :}
  | expr:a POW expr:b                       {: RESULT = Ast.make(AstKind.AST_POW, a, b); :}
  | expr:a DIVIDE expr:b                    {: RESULT = Ast.make(AstKind.AST_DIVIDE, a, b); :}
  | expr:a MODULO expr:b                    {: RESULT = Ast.make(AstKind.AST_MODULO, a, b); :}
  | expr:a EQUALS expr:b                    {: RESULT = Ast.make(AstKind.AST_EQUALS, a, b); :}
  | expr:a NOT_EQUALS expr:b                {: RESULT = Ast.make(AstKind.AST_NOT_EQUALS, a, b); :}
  | expr:a SMALLER expr:b                   {: RESULT = Ast.make(AstKind.AST_SMALLER, a, b); :}
  | expr:a SMALLER_OR_EQUAL expr:b          {: RESULT = Ast.make(AstKind.AST_SMALLER_OR_EQUAL, a, b); :}
  | expr:a GREATER expr:b                   {: RESULT = Ast.make(AstKind.AST_GREATER, a, b); :}
  | expr:a GREATER_OR_EQUAL expr:b          {: RESULT = Ast.make(AstKind.AST_GREATER_OR_EQUAL, a, b); :}
  | EXCLAMATION expr:e                      {: RESULT = Ast.make(AstKind.AST_BOOL_NOT, e); :}
  | function_call:fc                        {: RESULT = fc; :}
  | expr:e AS identifier:i                  {: RESULT = Ast.typeCast(e, i); :}
  | expr:e IS identifier:i                  {: RESULT = Ast.typeCheck(e, i); :}
  | LEN LPAREN expr:e RPAREN                {: RESULT = Ast.make(AstKind.AST_LEN, e); :}
  | TYPEOF LPAREN expr:e RPAREN             {: RESULT = Ast.make(AstKind.AST_TYPEOF, e); :}
  | NEW identifier:i                        {: RESULT = Ast.make(AstKind.AST_NEW, i); :}
  | LPAREN expr:e RPAREN                    {: RESULT = e; :}
  | scalar:s                                {: RESULT = s; :}
;

optional_expr ::=
    expr:e                                  {: RESULT = e; :}
  | /* %empty */
;

expr_list ::=
    expr_list:el COMMA optional_expr:oe     {: RESULT = el.add(oe); :}
  | optional_expr:oe                        {: RESULT = AstList.beginList(oe); :}
;

parameter_list ::=
    non_empty_parameter_list:nepl           {: RESULT = nepl; :}
  | /* %empty */                            {: RESULT = AstList.beginList(); :}
;

non_empty_parameter_list ::=
    identifier:i                            {: RESULT = AstList.beginList(i); :}
  | non_empty_parameter_list:nepl COMMA identifier:i
                                            {: RESULT = nepl.add(i); :}
;

identifier ::=
    LABEL:l                                 {: RESULT = Ast.identifier(l); :}
;

scalar ::=
    BOOL:b                                  {: RESULT = Ast.scalar(b, ScalarType.BOOL); :}
  | FLOAT:f                                 {: RESULT = Ast.scalar(f, ScalarType.FLOAT); :}
  | INTEGER:i                               {: RESULT = Ast.scalar(i, ScalarType.INT); :}
  | STRING:s                                {: RESULT = Ast.scalar(s, ScalarType.STRING); :}
  | array_expr:ae                           {: RESULT = ae; :}
;

function_call ::=
    identifier:i LPAREN expr_list:el RPAREN {: RESULT = Ast.make(AstKind.AST_CALL, i, el.makeArray()); :}
;

variable ::=
    identifier:i                            {: RESULT = i; :}
  | array_access:aa                         {: RESULT = aa; :}
  | struct_access:sa                        {: RESULT = sa; :}
;

array_access ::=
    variable:v LBRACKET optional_expr:oe RBRACKET
                                            {: RESULT = Ast.make(AstKind.AST_ARRAY_ACCESS, v, oe); :}
;

struct_access ::=
    variable:v DOT identifier:i             {: RESULT = Ast.make(AstKind.AST_STRUCT_ACCESS, v, i); :}
;

array_expr ::=
    LBRACKET expr_list:el RBRACKET          {: RESULT = el.makeArray(); :}
;
