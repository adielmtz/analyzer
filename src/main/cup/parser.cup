package org.automatas;

import java_cup.runtime.Symbol;
import java.util.List;

/* Literals */
terminal Scalar BOOL;
terminal Scalar FLOAT;
terminal Scalar INTEGER;
terminal Scalar IDENTIFIER;
terminal Scalar STRING;

/* Logic operators */
terminal Ast DECLARATION, ASSIGN;
terminal Ast EQUALS, NOT_EQUALS;
terminal Ast SMALLER, SMALLER_OR_EQUAL;
terminal Ast GREATER, GREATER_OR_EQUAL;
terminal Ast AND, OR;

/* Arithmetic operators */
terminal Ast ADD, MINUS, MULTIPLY, POW, DIVIDE, MODULUS;
terminal AST INCREMENT, DECREMENT;

/* Keywords */
terminal Ast PRINT, PRINTLN, UNSET;
terminal Ast FOR, WHILE;
terminal Ast IF, ELSE;

/* Symbols */
terminal LPAREN, RPAREN;
terminal COMMA, SEMICOLON;
terminal LBRACKET, RBRACKET;
terminal LBRACE, RBRACE;

/* Expressions */
non terminal List<Ast> statement_list;
non terminal List<Ast> print_expr_list;
non terminal Ast statement, if_statement, print_expr;
non terminal Ast expr, scalar;

precedence right DECLARATION, ASSIGN;
precedence left ADD, MINUS;
precedence left MULTIPLY, POW, DIVIDE, MODULUS;
precedence left AND, OR;

precedence nonassoc EQUALS, NOT_EQUALS;
precedence nonassoc SMALLER, SMALLER_OR_EQUAL;
precedence nonassoc GREATER, GREATER_OR_EQUAL;
precedence nonassoc INCREMENT, DECREMENT;
precedence nonassoc ELSE;

statement_list ::=
    statement_list:sl statement:s           {: sl.add(s); RESULT = sl; :}
  | /* %empty */                            {: RESULT = Ast.createList(); :}
;

statement ::=
    LBRACE statement_list:sl RBRACE         {: RESULT = Ast.createFromList(AstKind.AST_STATEMENT_LIST, sl); :}
  | if_statement:i                          {: RESULT = i; :}
  | FOR expr:a SEMICOLON expr:b SEMICOLON expr:c statement:s
                                            {: RESULT = Ast.create(AstKind.AST_FOR, a, b, c, s); :}
  | WHILE expr:e statement:s                {: RESULT = Ast.create(AstKind.AST_WHILE, e, s); :}
  | expr:e SEMICOLON                        {: RESULT = e; :}
  | PRINT print_expr_list:pel SEMICOLON     {: RESULT = Ast.createFromList(AstKind.AST_STATEMENT_LIST, pel); :}
  | PRINTLN expr:e SEMICOLON                {: RESULT = Ast.create(AstKind.AST_PRINTLN, e); :}
  | UNSET expr:e SEMICOLON                  {: RESULT = Ast.create(AstKind.AST_UNSET, e); :}
;

if_statement ::=
    IF expr:e statement:s                   {: RESULT = Ast.create(AstKind.AST_IF, e, s); :}
  | if_statement:i ELSE statement:s         {: RESULT = Ast.create(AstKind.AST_IF_ELSE, i, s); :}
;

print_expr_list ::=
    print_expr_list:pel COMMA print_expr:pe {: pel.add(pe); RESULT = pel; :}
  | print_expr:pe                           {: RESULT = Ast.createList(pe); :}
;

print_expr ::=
    expr:e                                  {: RESULT = Ast.create(AstKind.AST_PRINT, e); :}
;

expr ::=
    expr:a DECLARATION expr:b               {: RESULT = Ast.create(AstKind.AST_DECLARATION, a, b); :}
  | expr:a ASSIGN expr:b                    {: RESULT = Ast.create(AstKind.AST_ASSIGN, a, b); :}
  | expr:a AND expr:b                       {: RESULT = Ast.create(AstKind.AST_AND, a, b); :}
  | expr:a OR expr:b                        {: RESULT = Ast.create(AstKind.AST_OR, a, b); :}
  | expr:a EQUALS expr:b                    {: RESULT = Ast.create(AstKind.AST_EQUALS, a, b); :}
  | expr:a NOT_EQUALS expr:b                {: RESULT = Ast.create(AstKind.AST_NOT_EQUALS, a, b); :}
  | expr:a SMALLER expr:b                   {: RESULT = Ast.create(AstKind.AST_SMALLER, a, b); :}
  | expr:a SMALLER_OR_EQUAL expr:b          {: RESULT = Ast.create(AstKind.AST_SMALLER_OR_EQUAL, a, b); :}
  | expr:a GREATER expr:b                   {: RESULT = Ast.create(AstKind.AST_GREATER, a, b); :}
  | expr:a GREATER_OR_EQUAL expr:b          {: RESULT = Ast.create(AstKind.AST_GREATER_OR_EQUAL, a, b); :}
  | expr:a ADD expr:b                       {: RESULT = Ast.create(AstKind.AST_ADD, a, b); :}
  | expr:a MINUS expr:b                     {: RESULT = Ast.create(AstKind.AST_MINUS, a, b); :}
  | expr:a MULTIPLY expr:b                  {: RESULT = Ast.create(AstKind.AST_MULTIPLY, a, b); :}
  | expr:a POW expr:b                       {: RESULT = Ast.create(AstKind.AST_POW, a, b); :}
  | expr:a DIVIDE expr:b                    {: RESULT = Ast.create(AstKind.AST_DIVIDE, a, b); :}
  | expr:a MODULUS expr:b                   {: RESULT = Ast.create(AstKind.AST_MODULUS, a, b); :}
  | INCREMENT expr:a                        {: RESULT = Ast.create(AstKind.AST_PRE_INC, a); :}
  | DECREMENT expr:a                        {: RESULT = Ast.create(AstKind.AST_PRE_DEC, a); :}
  | expr:a INCREMENT                        {: RESULT = Ast.create(AstKind.AST_POST_INC, a); :}
  | expr:a DECREMENT                        {: RESULT = Ast.create(AstKind.AST_POST_DEC, a); :}
  | LPAREN expr:e RPAREN                    {: RESULT = e; :}
  | scalar:s                                {: RESULT = s; :}
;

scalar ::=
    IDENTIFIER:ident                        {: RESULT = Ast.createWithValue(AstKind.AST_IDENTIFIER, ident); :}
  | INTEGER:i                               {: RESULT = Ast.createWithValue(AstKind.AST_INTEGER, i); :}
  | FLOAT:f                                 {: RESULT = Ast.createWithValue(AstKind.AST_FLOAT, f); :}
  | BOOL:b                                  {: RESULT = Ast.createWithValue(AstKind.AST_BOOL, b); :}
  | STRING:s                                {: RESULT = Ast.createWithValue(AstKind.AST_STRING, s); :}
;
