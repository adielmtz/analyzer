package org.automatas.language;

import java_cup.runtime.Symbol;
import org.automatas.engine.Ast;
import org.automatas.engine.AstKind;
import org.automatas.engine.AstList;
import org.automatas.engine.ScalarType;

/* Literals */
terminal boolean BOOL;
terminal double  FLOAT;
terminal long    INTEGER;
terminal String  STRING;
terminal String  LABEL;

/* Logic operators */
terminal DECLARATION;
terminal ASSIGN;
terminal EQUALS;
terminal NOT_EQUALS;
terminal SMALLER;
terminal SMALLER_OR_EQUAL;
terminal GREATER;
terminal GREATER_OR_EQUAL;
terminal AND;
terminal OR;

/* Arithmetic operators */
terminal PLUS;
terminal MINUS;
terminal MULTIPLY;
terminal POW;
terminal DIVIDE;
terminal MODULO;
terminal INCREMENT;
terminal DECREMENT;

/* Keywords */
terminal PRINT;
terminal PRINTLN;
terminal UNSET;
terminal LEN;
terminal TYPEOF;
terminal AS;
terminal IS;
terminal IN;
terminal INPUT;
terminal FOR;
terminal FOREACH;
terminal DO;
terminal WHILE;
terminal IF;
terminal ELSE;
terminal NOELSE;

/* Symbols */
terminal LPAREN;
terminal RPAREN;
terminal LBRACKET;
terminal RBRACKET;
terminal LBRACE;
terminal RBRACE;
terminal EXCLAMATION;
terminal COMMA;
terminal SEMICOLON;

/* Statements */
non terminal AstList statement_list;
non terminal Ast top_statement;
non terminal Ast statement;
non terminal Ast if_statement;
non terminal Ast if_stmt_without_else;

/* Expressions */
non terminal AstList expr_list;
non terminal AstList print_expr_list;
non terminal Ast expr;
non terminal Ast array_expr;
non terminal Ast print_expr;
non terminal Ast optional_expr;
non terminal Ast scalar;
non terminal Ast identifier;
non terminal Ast variable;
non terminal Ast array_access;

precedence nonassoc DECLARATION;
precedence nonassoc ASSIGN;
precedence nonassoc EXCLAMATION;
precedence nonassoc EQUALS;
precedence nonassoc NOT_EQUALS;
precedence nonassoc SMALLER;
precedence nonassoc SMALLER_OR_EQUAL;
precedence nonassoc GREATER;
precedence nonassoc GREATER_OR_EQUAL;
precedence nonassoc INCREMENT;
precedence nonassoc DECREMENT;
precedence nonassoc ELSE;
precedence nonassoc LBRACKET;
precedence nonassoc RBRACKET;

precedence left PLUS;
precedence left MINUS;
precedence left MULTIPLY;
precedence left POW;
precedence left DIVIDE;
precedence left MODULO;
precedence left AND;
precedence left OR;
precedence left AS;
precedence left IS;

start with top_statement;

top_statement ::=
    statement_list:sl                       {: RESULT = sl.makeList(); :}
;

statement_list ::=
    statement_list:sl statement:s           {: RESULT = sl.add(s); :}
  | /* %empty */                            {: RESULT = AstList.beginList(); :}
;

statement ::=
    LBRACE statement_list:sl RBRACE         {: RESULT = sl.makeList(); :}
  | if_statement:i                          {: RESULT = i; :}
  | DO statement:s WHILE expr:e SEMICOLON   {: RESULT = Ast.make(AstKind.AST_DO_WHILE, s, e); :}
  | WHILE expr:e statement:s                {: RESULT = Ast.make(AstKind.AST_WHILE, e, s); :}
  | FOR expr:a SEMICOLON expr:b SEMICOLON expr:c statement:s
                                            {: RESULT = Ast.make(AstKind.AST_FOR, a, b, c, s); :}
  | FOREACH identifier:i IN expr:e statement:s
                                            {: RESULT = Ast.make(AstKind.AST_FOREACH, i, e, s); :}
  | PRINT print_expr_list:pel SEMICOLON     {: RESULT = pel.makeList(); :}
  | PRINTLN expr:e SEMICOLON                {: RESULT = Ast.make(AstKind.AST_PRINTLN, e); :}
  | expr:e SEMICOLON                        {: RESULT = e; :}
  | UNSET variable:v SEMICOLON              {: RESULT = Ast.make(AstKind.AST_UNSET, v); :}
;

if_stmt_without_else ::=
    IF expr:e statement:s                   {: RESULT = Ast.make(AstKind.AST_IF, e, s); :}
;

if_statement ::=
    if_stmt_without_else:iswe               {: RESULT = iswe; :} %prec NOELSE
  | if_stmt_without_else:iswe ELSE statement:s
                                            {: RESULT = Ast.make(AstKind.AST_IF_ELSE, iswe, s); :}
;

print_expr_list ::=
    print_expr_list:pel COMMA print_expr:pe {: RESULT = pel.add(pe); :}
  | print_expr:pe                           {: RESULT = AstList.beginList(pe); :}
;

print_expr ::=
    expr:e                                  {: RESULT = Ast.make(AstKind.AST_PRINT, e); :}
;

expr ::=
    variable:v                              {: RESULT = v; :}
  | variable:v DECLARATION expr:e           {: RESULT = Ast.make(AstKind.AST_DECLARATION, v, e); :}
  | variable:v ASSIGN expr:e                {: RESULT = Ast.make(AstKind.AST_ASSIGN, v, e); :}
  | variable:v INCREMENT                    {: RESULT = Ast.make(AstKind.AST_POST_INC, v); :}
  | INCREMENT variable:v                    {: RESULT = Ast.make(AstKind.AST_PRE_INC, v); :}
  | variable:v DECREMENT                    {: RESULT = Ast.make(AstKind.AST_POST_DEC, v); :}
  | DECREMENT variable:v                    {: RESULT = Ast.make(AstKind.AST_PRE_DEC, v); :}
  | expr:a AND expr:b                       {: RESULT = Ast.make(AstKind.AST_AND, a, b); :}
  | expr:a OR expr:b                        {: RESULT = Ast.make(AstKind.AST_OR, a, b); :}
  | expr:a PLUS expr:b                      {: RESULT = Ast.make(AstKind.AST_ADD, a, b); :}
  | expr:a MINUS expr:b                     {: RESULT = Ast.make(AstKind.AST_SUBTRACT, a, b); :}
  | expr:a MULTIPLY expr:b                  {: RESULT = Ast.make(AstKind.AST_MULTIPLY, a, b); :}
  | expr:a POW expr:b                       {: RESULT = Ast.make(AstKind.AST_POW, a, b); :}
  | expr:a DIVIDE expr:b                    {: RESULT = Ast.make(AstKind.AST_DIVIDE, a, b); :}
  | expr:a MODULO expr:b                    {: RESULT = Ast.make(AstKind.AST_MODULO, a, b); :}
  | expr:a EQUALS expr:b                    {: RESULT = Ast.make(AstKind.AST_EQUALS, a, b); :}
  | expr:a NOT_EQUALS expr:b                {: RESULT = Ast.make(AstKind.AST_NOT_EQUALS, a, b); :}
  | expr:a SMALLER expr:b                   {: RESULT = Ast.make(AstKind.AST_SMALLER, a, b); :}
  | expr:a SMALLER_OR_EQUAL expr:b          {: RESULT = Ast.make(AstKind.AST_SMALLER_OR_EQUAL, a, b); :}
  | expr:a GREATER expr:b                   {: RESULT = Ast.make(AstKind.AST_GREATER, a, b); :}
  | expr:a GREATER_OR_EQUAL expr:b          {: RESULT = Ast.make(AstKind.AST_GREATER_OR_EQUAL, a, b); :}
  | EXCLAMATION expr:e                      {: RESULT = Ast.make(AstKind.AST_BOOL_NOT, e); :}
  | expr:e AS identifier:i                  {: RESULT = Ast.typeCast(e, i); :}
  | expr:e IS identifier:i                  {: RESULT = Ast.typeCheck(e, i); :}
  | LEN LPAREN expr:e RPAREN                {: RESULT = Ast.make(AstKind.AST_LEN, e); :}
  | TYPEOF LPAREN expr:e RPAREN             {: RESULT = Ast.make(AstKind.AST_TYPEOF, e); :}
  | INPUT LPAREN optional_expr:oe RPAREN    {: RESULT = Ast.make(AstKind.AST_INPUT, oe); :}
  | LPAREN expr:e RPAREN                    {: RESULT = e; :}
  | scalar:s                                {: RESULT = s; :}
;

optional_expr ::=
    expr:e                                  {: RESULT = e; :}
  | /* %empty */
;

expr_list ::=
    expr_list:el COMMA optional_expr:oe     {: RESULT = el.add(oe); :}
  | optional_expr:oe                        {: RESULT = AstList.beginList(oe); :}
;

identifier ::=
    LABEL:l                                 {: RESULT = Ast.identifier(l); :}
;

scalar ::=
    BOOL:b                                  {: RESULT = Ast.scalar(b, ScalarType.BOOL); :}
  | FLOAT:f                                 {: RESULT = Ast.scalar(f, ScalarType.FLOAT); :}
  | INTEGER:i                               {: RESULT = Ast.scalar(i, ScalarType.INT); :}
  | STRING:s                                {: RESULT = Ast.scalar(s, ScalarType.STRING); :}
  | array_expr:ae                           {: RESULT = ae; :}
;

variable ::=
    identifier:i                            {: RESULT = i; :}
  | array_access:aa                         {: RESULT = aa; :}
;

array_access ::=
    variable:v LBRACKET optional_expr:oe RBRACKET
                                            {: RESULT = Ast.make(AstKind.AST_ARRAY_ACCESS, v, oe); :}
;

array_expr ::=
    LBRACKET expr_list:el RBRACKET          {: RESULT = el.makeArray(); :}
;
